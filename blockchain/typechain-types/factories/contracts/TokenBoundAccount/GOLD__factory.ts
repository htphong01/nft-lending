/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  GOLD,
  GOLDInterface,
} from "../../../contracts/TokenBoundAccount/GOLD";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "allowance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientAllowance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientBalance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "approver",
        type: "address",
      },
    ],
    name: "ERC20InvalidApprover",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
    ],
    name: "ERC20InvalidReceiver",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSender",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSpender",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Minted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506040518060400160405280600481526020017f474f4c44000000000000000000000000000000000000000000000000000000008152506040518060400160405280600481526020017f474f4c4400000000000000000000000000000000000000000000000000000000815250816003908161008c9190610311565b50806004908161009c9190610311565b5050506100b9675c68792d0d38dd1160c01b6100be60201b60201c565b6103e3565b50565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061014257607f821691505b602082108103610155576101546100fb565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026101bd7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610180565b6101c78683610180565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600061020e610209610204846101df565b6101e9565b6101df565b9050919050565b6000819050919050565b610228836101f3565b61023c61023482610215565b84845461018d565b825550505050565b600090565b610251610244565b61025c81848461021f565b505050565b5b8181101561028057610275600082610249565b600181019050610262565b5050565b601f8211156102c5576102968161015b565b61029f84610170565b810160208510156102ae578190505b6102c26102ba85610170565b830182610261565b50505b505050565b600082821c905092915050565b60006102e8600019846008026102ca565b1980831691505092915050565b600061030183836102d7565b9150826002028217905092915050565b61031a826100c1565b67ffffffffffffffff811115610333576103326100cc565b5b61033d825461012a565b610348828285610284565b600060209050601f83116001811461037b5760008415610369578287015190505b61037385826102f5565b8655506103db565b601f1984166103898661015b565b60005b828110156103b15784890151825560018201915060208501945060208101905061038c565b868310156103ce57848901516103ca601f8916826102d7565b8355505b6001600288020188555050505b505050505050565b610fd6806103f26000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c806340c10f191161006657806340c10f191461015d57806370a082311461017957806395d89b41146101a9578063a9059cbb146101c7578063dd62ed3e146101f75761009e565b806306fdde03146100a3578063095ea7b3146100c157806318160ddd146100f157806323b872dd1461010f578063313ce5671461013f575b600080fd5b6100ab610227565b6040516100b89190610c01565b60405180910390f35b6100db60048036038101906100d69190610cbc565b6102b9565b6040516100e89190610d17565b60405180910390f35b6100f96102dc565b6040516101069190610d41565b60405180910390f35b61012960048036038101906101249190610d5c565b6102e6565b6040516101369190610d17565b60405180910390f35b610147610315565b6040516101549190610dcb565b60405180910390f35b61017760048036038101906101729190610cbc565b61031e565b005b610193600480360381019061018e9190610de6565b6103c9565b6040516101a09190610d41565b60405180910390f35b6101b1610411565b6040516101be9190610c01565b60405180910390f35b6101e160048036038101906101dc9190610cbc565b6104a3565b6040516101ee9190610d17565b60405180910390f35b610211600480360381019061020c9190610e13565b6104c6565b60405161021e9190610d41565b60405180910390f35b60606003805461023690610e82565b80601f016020809104026020016040519081016040528092919081815260200182805461026290610e82565b80156102af5780601f10610284576101008083540402835291602001916102af565b820191906000526020600020905b81548152906001019060200180831161029257829003601f168201915b5050505050905090565b6000806102c461054d565b90506102d1818585610555565b600191505092915050565b6000600254905090565b6000806102f161054d565b90506102fe858285610567565b6103098585856105fc565b60019150509392505050565b60006012905090565b61033267a9a6be5587fe381460c01b6106f0565b61034667ae4503f62fc650d260c01b6106f0565b61035a677d85df53edd1dc9960c01b6106f0565b61036482826106f3565b610378670588347ccfb7e00360c01b6106f0565b61038c6748ed7a744a8fc2db60c01b6106f0565b7f30385c845b448a36257a6a1716e6ad2e1bc2cbe333cde1e69fe849ad6511adfe82826040516103bd929190610ec2565b60405180910390a15050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606004805461042090610e82565b80601f016020809104026020016040519081016040528092919081815260200182805461044c90610e82565b80156104995780601f1061046e57610100808354040283529160200191610499565b820191906000526020600020905b81548152906001019060200180831161047c57829003601f168201915b5050505050905090565b6000806104ae61054d565b90506104bb8185856105fc565b600191505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b6105628383836001610775565b505050565b600061057384846104c6565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8110156105f657818110156105e6578281836040517ffb8f41b20000000000000000000000000000000000000000000000000000000081526004016105dd93929190610eeb565b60405180910390fd5b6105f584848484036000610775565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361066e5760006040517f96c6fd1e0000000000000000000000000000000000000000000000000000000081526004016106659190610f22565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036106e05760006040517fec442f050000000000000000000000000000000000000000000000000000000081526004016106d79190610f22565b60405180910390fd5b6106eb83838361094c565b505050565b50565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036107655760006040517fec442f0500000000000000000000000000000000000000000000000000000000815260040161075c9190610f22565b60405180910390fd5b6107716000838361094c565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036107e75760006040517fe602df050000000000000000000000000000000000000000000000000000000081526004016107de9190610f22565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036108595760006040517f94280d620000000000000000000000000000000000000000000000000000000081526004016108509190610f22565b60405180910390fd5b81600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508015610946578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161093d9190610d41565b60405180910390a35b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361099e5780600260008282546109929190610f6c565b92505081905550610a71565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610a2a578381836040517fe450d38c000000000000000000000000000000000000000000000000000000008152600401610a2193929190610eeb565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610aba5780600260008282540392505081905550610b07565b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610b649190610d41565b60405180910390a3505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610bab578082015181840152602081019050610b90565b60008484015250505050565b6000601f19601f8301169050919050565b6000610bd382610b71565b610bdd8185610b7c565b9350610bed818560208601610b8d565b610bf681610bb7565b840191505092915050565b60006020820190508181036000830152610c1b8184610bc8565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610c5382610c28565b9050919050565b610c6381610c48565b8114610c6e57600080fd5b50565b600081359050610c8081610c5a565b92915050565b6000819050919050565b610c9981610c86565b8114610ca457600080fd5b50565b600081359050610cb681610c90565b92915050565b60008060408385031215610cd357610cd2610c23565b5b6000610ce185828601610c71565b9250506020610cf285828601610ca7565b9150509250929050565b60008115159050919050565b610d1181610cfc565b82525050565b6000602082019050610d2c6000830184610d08565b92915050565b610d3b81610c86565b82525050565b6000602082019050610d566000830184610d32565b92915050565b600080600060608486031215610d7557610d74610c23565b5b6000610d8386828701610c71565b9350506020610d9486828701610c71565b9250506040610da586828701610ca7565b9150509250925092565b600060ff82169050919050565b610dc581610daf565b82525050565b6000602082019050610de06000830184610dbc565b92915050565b600060208284031215610dfc57610dfb610c23565b5b6000610e0a84828501610c71565b91505092915050565b60008060408385031215610e2a57610e29610c23565b5b6000610e3885828601610c71565b9250506020610e4985828601610c71565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610e9a57607f821691505b602082108103610ead57610eac610e53565b5b50919050565b610ebc81610c48565b82525050565b6000604082019050610ed76000830185610eb3565b610ee46020830184610d32565b9392505050565b6000606082019050610f006000830186610eb3565b610f0d6020830185610d32565b610f1a6040830184610d32565b949350505050565b6000602082019050610f376000830184610eb3565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610f7782610c86565b9150610f8283610c86565b9250828201905080821115610f9a57610f99610f3d565b5b9291505056fea2646970667358221220e38127e3cc3d5732b23dfb6e06a9c51a1d55c26985acbfc65c69128e843cf81764736f6c634300081c0033";

type GOLDConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GOLDConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class GOLD__factory extends ContractFactory {
  constructor(...args: GOLDConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      GOLD & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): GOLD__factory {
    return super.connect(runner) as GOLD__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GOLDInterface {
    return new Interface(_abi) as GOLDInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): GOLD {
    return new Contract(address, _abi, runner) as unknown as GOLD;
  }
}
