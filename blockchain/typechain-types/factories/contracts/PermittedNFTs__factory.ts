/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  PermittedNFTs,
  PermittedNFTsInterface,
} from "../../contracts/PermittedNFTs";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_admin",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "EnforcedPause",
    type: "error",
  },
  {
    inputs: [],
    name: "ExpectedPause",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    inputs: [],
    name: "ReentrancyGuardReentrantCall",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "nftContract",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "isPermitted",
        type: "bool",
      },
    ],
    name: "NFTPermit",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Paused",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Unpaused",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_nftContract",
        type: "address",
      },
    ],
    name: "getNFTPermit",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "paused",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_nftContract",
        type: "address",
      },
      {
        internalType: "bool",
        name: "_isPermitted",
        type: "bool",
      },
    ],
    name: "setNFTPermit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "_nftContracts",
        type: "address[]",
      },
      {
        internalType: "bool",
        name: "_isPermitted",
        type: "bool",
      },
    ],
    name: "setNFTPermits",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161063738038061063783398101604081905261002f916100cf565b806001600160a01b03811661005e57604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b6100678161007f565b50506000805460ff60a01b19169055600180556100ff565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100e157600080fd5b81516001600160a01b03811681146100f857600080fd5b9392505050565b6105298061010e6000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063715018a61161005b578063715018a6146100e65780638da5cb5b146100ee578063b06992ef14610109578063f2fde38b1461011c57600080fd5b80632a27811e146100825780635c975abb146100975780636651f11d146100ba575b600080fd5b6100956100903660046103af565b61012f565b005b600054600160a01b900460ff165b60405190151581526020015b60405180910390f35b6100a56100c8366004610491565b6001600160a01b031660009081526002602052604090205460ff1690565b610095610145565b6000546040516001600160a01b0390911681526020016100b1565b6100956101173660046104b3565b610159565b61009561012a366004610491565b61016b565b6101376101ae565b61014182826101db565b5050565b61014d6101ae565b6101576000610268565b565b6101616101ae565b61014182826102b8565b6101736101ae565b6001600160a01b0381166101a257604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b6101ab81610268565b50565b6000546001600160a01b031633146101575760405163118cdaa760e01b8152336004820152602401610199565b600082511161022c5760405162461bcd60e51b815260206004820152601b60248201527f496e76616c6964206c656e677468206e6674436f6e74726163747300000000006044820152606401610199565b60005b82518110156102635761025b83828151811061024d5761024d6104dd565b6020026020010151836102b8565b60010161022f565b505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03821661030e5760405162461bcd60e51b815260206004820152601b60248201527f6e6674436f6e7472616374206973207a65726f206164647265737300000000006044820152606401610199565b6001600160a01b038216600081815260026020908152604091829020805460ff191685151590811790915591519182527f9f64376b4ce09200833c49794198c90facdc3856721f47e050d031d5b923438f910160405180910390a25050565b634e487b7160e01b600052604160045260246000fd5b80356001600160a01b038116811461039a57600080fd5b919050565b8035801515811461039a57600080fd5b600080604083850312156103c257600080fd5b823567ffffffffffffffff8111156103d957600080fd5b8301601f810185136103ea57600080fd5b803567ffffffffffffffff8111156104045761040461036d565b8060051b604051601f19603f830116810181811067ffffffffffffffff821117156104315761043161036d565b60405291825260208184018101929081018884111561044f57600080fd5b6020850194505b838510156104755761046785610383565b815260209485019401610456565b509450610488925050506020840161039f565b90509250929050565b6000602082840312156104a357600080fd5b6104ac82610383565b9392505050565b600080604083850312156104c657600080fd5b6104cf83610383565b91506104886020840161039f565b634e487b7160e01b600052603260045260246000fdfea26469706673582212208fed9fdea839c48939091e7c93603c3fb7b7362e4cf1d924e54c7c30d766062264736f6c634300081c0033";

type PermittedNFTsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PermittedNFTsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PermittedNFTs__factory extends ContractFactory {
  constructor(...args: PermittedNFTsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _admin: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_admin, overrides || {});
  }
  override deploy(
    _admin: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_admin, overrides || {}) as Promise<
      PermittedNFTs & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): PermittedNFTs__factory {
    return super.connect(runner) as PermittedNFTs__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PermittedNFTsInterface {
    return new Interface(_abi) as PermittedNFTsInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): PermittedNFTs {
    return new Contract(address, _abi, runner) as unknown as PermittedNFTs;
  }
}
