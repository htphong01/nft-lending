/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  PermittedNFTs,
  PermittedNFTsInterface,
} from "../../contracts/PermittedNFTs";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_admin",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "EnforcedPause",
    type: "error",
  },
  {
    inputs: [],
    name: "ExpectedPause",
    type: "error",
  },
  {
    inputs: [],
    name: "ReentrancyGuardReentrantCall",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "nftContract",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "isPermitted",
        type: "bool",
      },
    ],
    name: "NFTPermit",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Paused",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Unpaused",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_nftContract",
        type: "address",
      },
    ],
    name: "getNFTPermit",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "paused",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_nftContract",
        type: "address",
      },
      {
        internalType: "bool",
        name: "_isPermitted",
        type: "bool",
      },
    ],
    name: "setNFTPermit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "_nftContracts",
        type: "address[]",
      },
      {
        internalType: "bool",
        name: "_isPermitted",
        type: "bool",
      },
    ],
    name: "setNFTPermits",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b50604051610677380380610677833981016040819052602c91609b565b80603481604b565b50506000805460ff60a01b191690556001805560c9565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121560ac57600080fd5b81516001600160a01b038116811460c257600080fd5b9392505050565b61059f806100d86000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80632a27811e146100675780635c975abb1461007c5780636651f11d1461009f5780638da5cb5b146100cb578063b06992ef146100e6578063f2fde38b146100f9575b600080fd5b61007a6100753660046103f0565b61010c565b005b600054600160a01b900460ff165b60405190151581526020015b60405180910390f35b61008a6100ad3660046104d2565b6001600160a01b031660009081526002602052604090205460ff1690565b6000546040516001600160a01b039091168152602001610096565b61007a6100f43660046104f4565b61014d565b61007a6101073660046104d2565b610181565b6000546001600160a01b0316331461013f5760405162461bcd60e51b81526004016101369061051e565b60405180910390fd5b610149828261021c565b5050565b6000546001600160a01b031633146101775760405162461bcd60e51b81526004016101369061051e565b61014982826102a9565b6000546001600160a01b031633146101ab5760405162461bcd60e51b81526004016101369061051e565b6001600160a01b0381166102105760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610136565b6102198161035e565b50565b600082511161026d5760405162461bcd60e51b815260206004820152601b60248201527f496e76616c6964206c656e677468206e6674436f6e74726163747300000000006044820152606401610136565b60005b82518110156102a45761029c83828151811061028e5761028e610553565b6020026020010151836102a9565b600101610270565b505050565b6001600160a01b0382166102ff5760405162461bcd60e51b815260206004820152601b60248201527f6e6674436f6e7472616374206973207a65726f206164647265737300000000006044820152606401610136565b6001600160a01b038216600081815260026020908152604091829020805460ff191685151590811790915591519182527f9f64376b4ce09200833c49794198c90facdc3856721f47e050d031d5b923438f910160405180910390a25050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b634e487b7160e01b600052604160045260246000fd5b80356001600160a01b03811681146103db57600080fd5b919050565b803580151581146103db57600080fd5b6000806040838503121561040357600080fd5b823567ffffffffffffffff81111561041a57600080fd5b8301601f8101851361042b57600080fd5b803567ffffffffffffffff811115610445576104456103ae565b8060051b604051601f19603f830116810181811067ffffffffffffffff82111715610472576104726103ae565b60405291825260208184018101929081018884111561049057600080fd5b6020850194505b838510156104b6576104a8856103c4565b815260209485019401610497565b5094506104c992505050602084016103e0565b90509250929050565b6000602082840312156104e457600080fd5b6104ed826103c4565b9392505050565b6000806040838503121561050757600080fd5b610510836103c4565b91506104c9602084016103e0565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fdfea2646970667358221220e3abfd6d30885b1b8f31c6f9239ac21a55bb2ad9df56dd93860571dd2a134b5764736f6c634300081c0033";

type PermittedNFTsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PermittedNFTsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PermittedNFTs__factory extends ContractFactory {
  constructor(...args: PermittedNFTsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _admin: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_admin, overrides || {});
  }
  override deploy(
    _admin: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_admin, overrides || {}) as Promise<
      PermittedNFTs & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): PermittedNFTs__factory {
    return super.connect(runner) as PermittedNFTs__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PermittedNFTsInterface {
    return new Interface(_abi) as PermittedNFTsInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): PermittedNFTs {
    return new Contract(address, _abi, runner) as unknown as PermittedNFTs;
  }
}
