/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace Marketplace {
  export type ItemStruct = {
    itemId: BigNumberish;
    nft: AddressLike;
    tokenId: BigNumberish;
    price: BigNumberish;
    paymentToken: AddressLike;
    seller: AddressLike;
    beneficiary: AddressLike;
    status: BigNumberish;
  };

  export type ItemStructOutput = [
    itemId: bigint,
    nft: string,
    tokenId: bigint,
    price: bigint,
    paymentToken: string,
    seller: string,
    beneficiary: string,
    status: bigint
  ] & {
    itemId: bigint;
    nft: string;
    tokenId: bigint;
    price: bigint;
    paymentToken: string;
    seller: string;
    beneficiary: string;
    status: bigint;
  };
}

export interface MarketplaceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "admins"
      | "closeItem"
      | "feePercent"
      | "feeReceiver"
      | "isAdmin"
      | "itemCount"
      | "items"
      | "makeItem"
      | "onERC721Received"
      | "owner"
      | "paymentToken"
      | "purchaseItem"
      | "renounceOwnership"
      | "setAdmin"
      | "setAdmins"
      | "setFeePercent"
      | "setFeeReceiver"
      | "setPaymentToken"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BoughtItem"
      | "ClosedItem"
      | "MakeItem"
      | "OwnershipTransferred"
      | "SetAdmin"
      | "SetFeePercent"
      | "SetFeeReceiver"
      | "SetPaymentToken"
  ): EventFragment;

  encodeFunctionData(functionFragment: "admins", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "closeItem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "feePercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeReceiver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "itemCount", values?: undefined): string;
  encodeFunctionData(functionFragment: "items", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "makeItem",
    values: [AddressLike, BigNumberish, AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "paymentToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "purchaseItem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAdmin",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setAdmins",
    values: [AddressLike[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeePercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeReceiver",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPaymentToken",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "admins", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "closeItem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feePercent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "itemCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "items", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "makeItem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paymentToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "purchaseItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setAdmins", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPaymentToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace BoughtItemEvent {
  export type InputTuple = [itemId: BigNumberish, buyer: AddressLike];
  export type OutputTuple = [itemId: bigint, buyer: string];
  export interface OutputObject {
    itemId: bigint;
    buyer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClosedItemEvent {
  export type InputTuple = [itemId: BigNumberish];
  export type OutputTuple = [itemId: bigint];
  export interface OutputObject {
    itemId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MakeItemEvent {
  export type InputTuple = [itemId: BigNumberish, item: Marketplace.ItemStruct];
  export type OutputTuple = [
    itemId: bigint,
    item: Marketplace.ItemStructOutput
  ];
  export interface OutputObject {
    itemId: bigint;
    item: Marketplace.ItemStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetAdminEvent {
  export type InputTuple = [user: AddressLike, allow: boolean];
  export type OutputTuple = [user: string, allow: boolean];
  export interface OutputObject {
    user: string;
    allow: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetFeePercentEvent {
  export type InputTuple = [oldValue: BigNumberish, newValue: BigNumberish];
  export type OutputTuple = [oldValue: bigint, newValue: bigint];
  export interface OutputObject {
    oldValue: bigint;
    newValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetFeeReceiverEvent {
  export type InputTuple = [oldValue: AddressLike, newValue: AddressLike];
  export type OutputTuple = [oldValue: string, newValue: string];
  export interface OutputObject {
    oldValue: string;
    newValue: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetPaymentTokenEvent {
  export type InputTuple = [token: AddressLike, allow: boolean];
  export type OutputTuple = [token: string, allow: boolean];
  export interface OutputObject {
    token: string;
    allow: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Marketplace extends BaseContract {
  connect(runner?: ContractRunner | null): Marketplace;
  waitForDeployment(): Promise<this>;

  interface: MarketplaceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  admins: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  closeItem: TypedContractMethod<[_itemId: BigNumberish], [void], "nonpayable">;

  feePercent: TypedContractMethod<[], [bigint], "view">;

  feeReceiver: TypedContractMethod<[], [string], "view">;

  isAdmin: TypedContractMethod<[_account: AddressLike], [boolean], "view">;

  itemCount: TypedContractMethod<[], [bigint], "view">;

  items: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, bigint, string, string, string, bigint] & {
        itemId: bigint;
        nft: string;
        tokenId: bigint;
        price: bigint;
        paymentToken: string;
        seller: string;
        beneficiary: string;
        status: bigint;
      }
    ],
    "view"
  >;

  makeItem: TypedContractMethod<
    [
      _nft: AddressLike,
      _tokenId: BigNumberish,
      _paymentToken: AddressLike,
      _price: BigNumberish,
      _beneficiary: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  onERC721Received: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  paymentToken: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  purchaseItem: TypedContractMethod<[_itemId: BigNumberish], [void], "payable">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setAdmin: TypedContractMethod<
    [_user: AddressLike, _allow: boolean],
    [void],
    "nonpayable"
  >;

  setAdmins: TypedContractMethod<
    [_users: AddressLike[], _allow: boolean],
    [void],
    "nonpayable"
  >;

  setFeePercent: TypedContractMethod<
    [_newValue: BigNumberish],
    [void],
    "nonpayable"
  >;

  setFeeReceiver: TypedContractMethod<
    [_feeReceiver: AddressLike],
    [void],
    "nonpayable"
  >;

  setPaymentToken: TypedContractMethod<
    [_token: AddressLike, allow: boolean],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "admins"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "closeItem"
  ): TypedContractMethod<[_itemId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "feePercent"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "feeReceiver"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "isAdmin"
  ): TypedContractMethod<[_account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "itemCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "items"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, bigint, string, string, string, bigint] & {
        itemId: bigint;
        nft: string;
        tokenId: bigint;
        price: bigint;
        paymentToken: string;
        seller: string;
        beneficiary: string;
        status: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "makeItem"
  ): TypedContractMethod<
    [
      _nft: AddressLike,
      _tokenId: BigNumberish,
      _paymentToken: AddressLike,
      _price: BigNumberish,
      _beneficiary: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "onERC721Received"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "paymentToken"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "purchaseItem"
  ): TypedContractMethod<[_itemId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setAdmin"
  ): TypedContractMethod<
    [_user: AddressLike, _allow: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAdmins"
  ): TypedContractMethod<
    [_users: AddressLike[], _allow: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setFeePercent"
  ): TypedContractMethod<[_newValue: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFeeReceiver"
  ): TypedContractMethod<[_feeReceiver: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPaymentToken"
  ): TypedContractMethod<
    [_token: AddressLike, allow: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "BoughtItem"
  ): TypedContractEvent<
    BoughtItemEvent.InputTuple,
    BoughtItemEvent.OutputTuple,
    BoughtItemEvent.OutputObject
  >;
  getEvent(
    key: "ClosedItem"
  ): TypedContractEvent<
    ClosedItemEvent.InputTuple,
    ClosedItemEvent.OutputTuple,
    ClosedItemEvent.OutputObject
  >;
  getEvent(
    key: "MakeItem"
  ): TypedContractEvent<
    MakeItemEvent.InputTuple,
    MakeItemEvent.OutputTuple,
    MakeItemEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "SetAdmin"
  ): TypedContractEvent<
    SetAdminEvent.InputTuple,
    SetAdminEvent.OutputTuple,
    SetAdminEvent.OutputObject
  >;
  getEvent(
    key: "SetFeePercent"
  ): TypedContractEvent<
    SetFeePercentEvent.InputTuple,
    SetFeePercentEvent.OutputTuple,
    SetFeePercentEvent.OutputObject
  >;
  getEvent(
    key: "SetFeeReceiver"
  ): TypedContractEvent<
    SetFeeReceiverEvent.InputTuple,
    SetFeeReceiverEvent.OutputTuple,
    SetFeeReceiverEvent.OutputObject
  >;
  getEvent(
    key: "SetPaymentToken"
  ): TypedContractEvent<
    SetPaymentTokenEvent.InputTuple,
    SetPaymentTokenEvent.OutputTuple,
    SetPaymentTokenEvent.OutputObject
  >;

  filters: {
    "BoughtItem(uint256,address)": TypedContractEvent<
      BoughtItemEvent.InputTuple,
      BoughtItemEvent.OutputTuple,
      BoughtItemEvent.OutputObject
    >;
    BoughtItem: TypedContractEvent<
      BoughtItemEvent.InputTuple,
      BoughtItemEvent.OutputTuple,
      BoughtItemEvent.OutputObject
    >;

    "ClosedItem(uint256)": TypedContractEvent<
      ClosedItemEvent.InputTuple,
      ClosedItemEvent.OutputTuple,
      ClosedItemEvent.OutputObject
    >;
    ClosedItem: TypedContractEvent<
      ClosedItemEvent.InputTuple,
      ClosedItemEvent.OutputTuple,
      ClosedItemEvent.OutputObject
    >;

    "MakeItem(uint256,tuple)": TypedContractEvent<
      MakeItemEvent.InputTuple,
      MakeItemEvent.OutputTuple,
      MakeItemEvent.OutputObject
    >;
    MakeItem: TypedContractEvent<
      MakeItemEvent.InputTuple,
      MakeItemEvent.OutputTuple,
      MakeItemEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "SetAdmin(address,bool)": TypedContractEvent<
      SetAdminEvent.InputTuple,
      SetAdminEvent.OutputTuple,
      SetAdminEvent.OutputObject
    >;
    SetAdmin: TypedContractEvent<
      SetAdminEvent.InputTuple,
      SetAdminEvent.OutputTuple,
      SetAdminEvent.OutputObject
    >;

    "SetFeePercent(uint256,uint256)": TypedContractEvent<
      SetFeePercentEvent.InputTuple,
      SetFeePercentEvent.OutputTuple,
      SetFeePercentEvent.OutputObject
    >;
    SetFeePercent: TypedContractEvent<
      SetFeePercentEvent.InputTuple,
      SetFeePercentEvent.OutputTuple,
      SetFeePercentEvent.OutputObject
    >;

    "SetFeeReceiver(address,address)": TypedContractEvent<
      SetFeeReceiverEvent.InputTuple,
      SetFeeReceiverEvent.OutputTuple,
      SetFeeReceiverEvent.OutputObject
    >;
    SetFeeReceiver: TypedContractEvent<
      SetFeeReceiverEvent.InputTuple,
      SetFeeReceiverEvent.OutputTuple,
      SetFeeReceiverEvent.OutputObject
    >;

    "SetPaymentToken(address,bool)": TypedContractEvent<
      SetPaymentTokenEvent.InputTuple,
      SetPaymentTokenEvent.OutputTuple,
      SetPaymentTokenEvent.OutputObject
    >;
    SetPaymentToken: TypedContractEvent<
      SetPaymentTokenEvent.InputTuple,
      SetPaymentTokenEvent.OutputTuple,
      SetPaymentTokenEvent.OutputObject
    >;
  };
}
