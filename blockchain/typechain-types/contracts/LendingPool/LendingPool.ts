/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface LendingPoolInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "admins"
      | "approveToPayRewards"
      | "closeNftFromMarket"
      | "informDisburse"
      | "informPayBack"
      | "isAdmin"
      | "lendingStake"
      | "listNftToMarket"
      | "loan"
      | "marketplace"
      | "onERC721Received"
      | "owner"
      | "pause"
      | "paused"
      | "renounceOwnership"
      | "setAdmin"
      | "setAdmins"
      | "setLendingStake"
      | "setLoan"
      | "setMarketplace"
      | "transferOwnership"
      | "unpause"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Disbursed"
      | "ListNftToMarket"
      | "OwnershipTransferred"
      | "PaidBack"
      | "Paused"
      | "SetAdmin"
      | "SetLendingStake"
      | "SetLoan"
      | "SetMarketplace"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(functionFragment: "admins", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "approveToPayRewards",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "closeNftFromMarket",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "informDisburse",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "informPayBack",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lendingStake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "listNftToMarket",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "loan", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "marketplace",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAdmin",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setAdmins",
    values: [AddressLike[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setLendingStake",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setLoan",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarketplace",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(functionFragment: "admins", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approveToPayRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeNftFromMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "informDisburse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "informPayBack",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lendingStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listNftToMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "loan", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "marketplace",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setAdmins", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setLendingStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setLoan", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMarketplace",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
}

export namespace DisbursedEvent {
  export type InputTuple = [
    token: AddressLike,
    to: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [token: string, to: string, amount: bigint];
  export interface OutputObject {
    token: string;
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ListNftToMarketEvent {
  export type InputTuple = [
    nftContract: AddressLike,
    nftTokenId: BigNumberish,
    price: BigNumberish
  ];
  export type OutputTuple = [
    nftContract: string,
    nftTokenId: bigint,
    price: bigint
  ];
  export interface OutputObject {
    nftContract: string;
    nftTokenId: bigint;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaidBackEvent {
  export type InputTuple = [token: AddressLike, amount: BigNumberish];
  export type OutputTuple = [token: string, amount: bigint];
  export interface OutputObject {
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetAdminEvent {
  export type InputTuple = [user: AddressLike, allow: boolean];
  export type OutputTuple = [user: string, allow: boolean];
  export interface OutputObject {
    user: string;
    allow: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetLendingStakeEvent {
  export type InputTuple = [oldValue: AddressLike, newValue: AddressLike];
  export type OutputTuple = [oldValue: string, newValue: string];
  export interface OutputObject {
    oldValue: string;
    newValue: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetLoanEvent {
  export type InputTuple = [oldValue: AddressLike, newValue: AddressLike];
  export type OutputTuple = [oldValue: string, newValue: string];
  export interface OutputObject {
    oldValue: string;
    newValue: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetMarketplaceEvent {
  export type InputTuple = [oldValue: AddressLike, newValue: AddressLike];
  export type OutputTuple = [oldValue: string, newValue: string];
  export interface OutputObject {
    oldValue: string;
    newValue: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface LendingPool extends BaseContract {
  connect(runner?: ContractRunner | null): LendingPool;
  waitForDeployment(): Promise<this>;

  interface: LendingPoolInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  admins: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  approveToPayRewards: TypedContractMethod<
    [_token: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  closeNftFromMarket: TypedContractMethod<
    [_marketItemId: BigNumberish],
    [void],
    "nonpayable"
  >;

  informDisburse: TypedContractMethod<
    [_token: AddressLike, _to: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  informPayBack: TypedContractMethod<
    [_token: AddressLike, _principal: BigNumberish],
    [void],
    "nonpayable"
  >;

  isAdmin: TypedContractMethod<[_account: AddressLike], [boolean], "view">;

  lendingStake: TypedContractMethod<[], [string], "view">;

  listNftToMarket: TypedContractMethod<
    [
      _nftContract: AddressLike,
      _nftTokenId: BigNumberish,
      _price: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  loan: TypedContractMethod<[], [string], "view">;

  marketplace: TypedContractMethod<[], [string], "view">;

  onERC721Received: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setAdmin: TypedContractMethod<
    [_user: AddressLike, _allow: boolean],
    [void],
    "nonpayable"
  >;

  setAdmins: TypedContractMethod<
    [_users: AddressLike[], _allow: boolean],
    [void],
    "nonpayable"
  >;

  setLendingStake: TypedContractMethod<
    [_lendingStake: AddressLike],
    [void],
    "nonpayable"
  >;

  setLoan: TypedContractMethod<[_loan: AddressLike], [void], "nonpayable">;

  setMarketplace: TypedContractMethod<
    [_marketplace: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "admins"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "approveToPayRewards"
  ): TypedContractMethod<
    [_token: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "closeNftFromMarket"
  ): TypedContractMethod<[_marketItemId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "informDisburse"
  ): TypedContractMethod<
    [_token: AddressLike, _to: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "informPayBack"
  ): TypedContractMethod<
    [_token: AddressLike, _principal: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isAdmin"
  ): TypedContractMethod<[_account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "lendingStake"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "listNftToMarket"
  ): TypedContractMethod<
    [
      _nftContract: AddressLike,
      _nftTokenId: BigNumberish,
      _price: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "loan"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "marketplace"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "onERC721Received"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setAdmin"
  ): TypedContractMethod<
    [_user: AddressLike, _allow: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAdmins"
  ): TypedContractMethod<
    [_users: AddressLike[], _allow: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setLendingStake"
  ): TypedContractMethod<[_lendingStake: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setLoan"
  ): TypedContractMethod<[_loan: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMarketplace"
  ): TypedContractMethod<[_marketplace: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "Disbursed"
  ): TypedContractEvent<
    DisbursedEvent.InputTuple,
    DisbursedEvent.OutputTuple,
    DisbursedEvent.OutputObject
  >;
  getEvent(
    key: "ListNftToMarket"
  ): TypedContractEvent<
    ListNftToMarketEvent.InputTuple,
    ListNftToMarketEvent.OutputTuple,
    ListNftToMarketEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PaidBack"
  ): TypedContractEvent<
    PaidBackEvent.InputTuple,
    PaidBackEvent.OutputTuple,
    PaidBackEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "SetAdmin"
  ): TypedContractEvent<
    SetAdminEvent.InputTuple,
    SetAdminEvent.OutputTuple,
    SetAdminEvent.OutputObject
  >;
  getEvent(
    key: "SetLendingStake"
  ): TypedContractEvent<
    SetLendingStakeEvent.InputTuple,
    SetLendingStakeEvent.OutputTuple,
    SetLendingStakeEvent.OutputObject
  >;
  getEvent(
    key: "SetLoan"
  ): TypedContractEvent<
    SetLoanEvent.InputTuple,
    SetLoanEvent.OutputTuple,
    SetLoanEvent.OutputObject
  >;
  getEvent(
    key: "SetMarketplace"
  ): TypedContractEvent<
    SetMarketplaceEvent.InputTuple,
    SetMarketplaceEvent.OutputTuple,
    SetMarketplaceEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "Disbursed(address,address,uint256)": TypedContractEvent<
      DisbursedEvent.InputTuple,
      DisbursedEvent.OutputTuple,
      DisbursedEvent.OutputObject
    >;
    Disbursed: TypedContractEvent<
      DisbursedEvent.InputTuple,
      DisbursedEvent.OutputTuple,
      DisbursedEvent.OutputObject
    >;

    "ListNftToMarket(address,uint256,uint256)": TypedContractEvent<
      ListNftToMarketEvent.InputTuple,
      ListNftToMarketEvent.OutputTuple,
      ListNftToMarketEvent.OutputObject
    >;
    ListNftToMarket: TypedContractEvent<
      ListNftToMarketEvent.InputTuple,
      ListNftToMarketEvent.OutputTuple,
      ListNftToMarketEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PaidBack(address,uint256)": TypedContractEvent<
      PaidBackEvent.InputTuple,
      PaidBackEvent.OutputTuple,
      PaidBackEvent.OutputObject
    >;
    PaidBack: TypedContractEvent<
      PaidBackEvent.InputTuple,
      PaidBackEvent.OutputTuple,
      PaidBackEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "SetAdmin(address,bool)": TypedContractEvent<
      SetAdminEvent.InputTuple,
      SetAdminEvent.OutputTuple,
      SetAdminEvent.OutputObject
    >;
    SetAdmin: TypedContractEvent<
      SetAdminEvent.InputTuple,
      SetAdminEvent.OutputTuple,
      SetAdminEvent.OutputObject
    >;

    "SetLendingStake(address,address)": TypedContractEvent<
      SetLendingStakeEvent.InputTuple,
      SetLendingStakeEvent.OutputTuple,
      SetLendingStakeEvent.OutputObject
    >;
    SetLendingStake: TypedContractEvent<
      SetLendingStakeEvent.InputTuple,
      SetLendingStakeEvent.OutputTuple,
      SetLendingStakeEvent.OutputObject
    >;

    "SetLoan(address,address)": TypedContractEvent<
      SetLoanEvent.InputTuple,
      SetLoanEvent.OutputTuple,
      SetLoanEvent.OutputObject
    >;
    SetLoan: TypedContractEvent<
      SetLoanEvent.InputTuple,
      SetLoanEvent.OutputTuple,
      SetLoanEvent.OutputObject
    >;

    "SetMarketplace(address,address)": TypedContractEvent<
      SetMarketplaceEvent.InputTuple,
      SetMarketplaceEvent.OutputTuple,
      SetMarketplaceEvent.OutputObject
    >;
    SetMarketplace: TypedContractEvent<
      SetMarketplaceEvent.InputTuple,
      SetMarketplaceEvent.OutputTuple,
      SetMarketplaceEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
