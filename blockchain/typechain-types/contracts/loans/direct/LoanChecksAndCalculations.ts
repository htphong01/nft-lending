/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace LoanData {
  export type LoanTermsStruct = {
    principalAmount: BigNumberish;
    maximumRepaymentAmount: BigNumberish;
    nftCollateralId: BigNumberish;
    erc20Denomination: AddressLike;
    duration: BigNumberish;
    adminFeeInBasisPoints: BigNumberish;
    loanStartTime: BigNumberish;
    nftCollateralContract: AddressLike;
    borrower: AddressLike;
    lender: AddressLike;
    useLendingPool: boolean;
  };

  export type LoanTermsStructOutput = [
    principalAmount: bigint,
    maximumRepaymentAmount: bigint,
    nftCollateralId: bigint,
    erc20Denomination: string,
    duration: bigint,
    adminFeeInBasisPoints: bigint,
    loanStartTime: bigint,
    nftCollateralContract: string,
    borrower: string,
    lender: string,
    useLendingPool: boolean
  ] & {
    principalAmount: bigint;
    maximumRepaymentAmount: bigint;
    nftCollateralId: bigint;
    erc20Denomination: string;
    duration: bigint;
    adminFeeInBasisPoints: bigint;
    loanStartTime: bigint;
    nftCollateralContract: string;
    borrower: string;
    lender: string;
    useLendingPool: boolean;
  };
}

export interface LoanChecksAndCalculationsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "checkLoanIdValidity"
      | "computeAdminFee"
      | "payBackChecks"
      | "renegotiationChecks"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "checkLoanIdValidity",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "computeAdminFee",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "payBackChecks",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renegotiationChecks",
    values: [
      LoanData.LoanTermsStruct,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "checkLoanIdValidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeAdminFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payBackChecks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renegotiationChecks",
    data: BytesLike
  ): Result;
}

export interface LoanChecksAndCalculations extends BaseContract {
  connect(runner?: ContractRunner | null): LoanChecksAndCalculations;
  waitForDeployment(): Promise<this>;

  interface: LoanChecksAndCalculationsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  checkLoanIdValidity: TypedContractMethod<
    [_loanId: BytesLike],
    [void],
    "view"
  >;

  computeAdminFee: TypedContractMethod<
    [_interestDue: BigNumberish, _adminFeeInBasisPoints: BigNumberish],
    [bigint],
    "view"
  >;

  payBackChecks: TypedContractMethod<[_loanId: BytesLike], [void], "view">;

  renegotiationChecks: TypedContractMethod<
    [
      _loan: LoanData.LoanTermsStruct,
      _loanId: BytesLike,
      _newLoanDuration: BigNumberish,
      _newMaximumRepaymentAmount: BigNumberish,
      _lenderNonce: BigNumberish
    ],
    [[string, string]],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "checkLoanIdValidity"
  ): TypedContractMethod<[_loanId: BytesLike], [void], "view">;
  getFunction(
    nameOrSignature: "computeAdminFee"
  ): TypedContractMethod<
    [_interestDue: BigNumberish, _adminFeeInBasisPoints: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "payBackChecks"
  ): TypedContractMethod<[_loanId: BytesLike], [void], "view">;
  getFunction(
    nameOrSignature: "renegotiationChecks"
  ): TypedContractMethod<
    [
      _loan: LoanData.LoanTermsStruct,
      _loanId: BytesLike,
      _newLoanDuration: BigNumberish,
      _newMaximumRepaymentAmount: BigNumberish,
      _lenderNonce: BigNumberish
    ],
    [[string, string]],
    "view"
  >;

  filters: {};
}
