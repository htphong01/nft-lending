/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export declare namespace LoanData {
  export type LoanTermsStruct = {
    principalAmount: BigNumberish;
    maximumRepaymentAmount: BigNumberish;
    nftCollateralId: BigNumberish;
    erc20Denomination: AddressLike;
    duration: BigNumberish;
    adminFeeInBasisPoints: BigNumberish;
    loanStartTime: BigNumberish;
    nftCollateralContract: AddressLike;
    borrower: AddressLike;
    lender: AddressLike;
    useLendingPool: boolean;
    status: BigNumberish;
  };

  export type LoanTermsStructOutput = [
    principalAmount: bigint,
    maximumRepaymentAmount: bigint,
    nftCollateralId: bigint,
    erc20Denomination: string,
    duration: bigint,
    adminFeeInBasisPoints: bigint,
    loanStartTime: bigint,
    nftCollateralContract: string,
    borrower: string,
    lender: string,
    useLendingPool: boolean,
    status: bigint
  ] & {
    principalAmount: bigint;
    maximumRepaymentAmount: bigint;
    nftCollateralId: bigint;
    erc20Denomination: string;
    duration: bigint;
    adminFeeInBasisPoints: bigint;
    loanStartTime: bigint;
    nftCollateralContract: string;
    borrower: string;
    lender: string;
    useLendingPool: boolean;
    status: bigint;
  };

  export type OfferStruct = {
    principalAmount: BigNumberish;
    maximumRepaymentAmount: BigNumberish;
    nftCollateralId: BigNumberish;
    nftCollateralContract: AddressLike;
    duration: BigNumberish;
    adminFeeInBasisPoints: BigNumberish;
    erc20Denomination: AddressLike;
    lendingPool: AddressLike;
  };

  export type OfferStructOutput = [
    principalAmount: bigint,
    maximumRepaymentAmount: bigint,
    nftCollateralId: bigint,
    nftCollateralContract: string,
    duration: bigint,
    adminFeeInBasisPoints: bigint,
    erc20Denomination: string,
    lendingPool: string
  ] & {
    principalAmount: bigint;
    maximumRepaymentAmount: bigint;
    nftCollateralId: bigint;
    nftCollateralContract: string;
    duration: bigint;
    adminFeeInBasisPoints: bigint;
    erc20Denomination: string;
    lendingPool: string;
  };

  export type SignatureStruct = {
    nonce: BigNumberish;
    expiry: BigNumberish;
    signer: AddressLike;
    signature: BytesLike;
  };

  export type SignatureStructOutput = [
    nonce: bigint,
    expiry: bigint,
    signer: string,
    signature: string
  ] & { nonce: bigint; expiry: bigint; signer: string; signature: string };
}

export interface DirectLoanFixedOfferInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "HUNDRED_PERCENT"
      | "acceptOffer"
      | "adminFeeInBasisPoints"
      | "cancelLoanCommitmentBeforeLoanHasBegun"
      | "drainERC20Airdrop"
      | "drainERC721Airdrop"
      | "getERC20Permit"
      | "getPayoffAmount"
      | "getWhetherNonceHasBeenUsedForUser"
      | "isValidLoanId"
      | "liquidateOverdueLoan"
      | "loanIdToLoan"
      | "loanRepaidOrLiquidated"
      | "maximumLoanDuration"
      | "onERC721Received"
      | "owner"
      | "pause"
      | "paused"
      | "payBackLoan"
      | "permittedNFTs"
      | "renegotiateLoan"
      | "setERC20Permit"
      | "setERC20Permits"
      | "transferOwnership"
      | "unpause"
      | "updateAdminFee"
      | "updateMaximumLoanDuration"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminFeeUpdated"
      | "ERC20Permit"
      | "LoanLiquidated"
      | "LoanRenegotiated"
      | "LoanRepaid"
      | "LoanStarted"
      | "MaximumLoanDurationUpdated"
      | "OwnershipTransferred"
      | "Paused"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "HUNDRED_PERCENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOffer",
    values: [BytesLike, LoanData.OfferStruct, LoanData.SignatureStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "adminFeeInBasisPoints",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelLoanCommitmentBeforeLoanHasBegun",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "drainERC20Airdrop",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "drainERC721Airdrop",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getERC20Permit",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPayoffAmount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getWhetherNonceHasBeenUsedForUser",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidLoanId",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateOverdueLoan",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "loanIdToLoan",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "loanRepaidOrLiquidated",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maximumLoanDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "payBackLoan",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "permittedNFTs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renegotiateLoan",
    values: [
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setERC20Permit",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setERC20Permits",
    values: [AddressLike[], boolean[]]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateAdminFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMaximumLoanDuration",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "HUNDRED_PERCENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminFeeInBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelLoanCommitmentBeforeLoanHasBegun",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "drainERC20Airdrop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "drainERC721Airdrop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getERC20Permit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPayoffAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWhetherNonceHasBeenUsedForUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidLoanId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidateOverdueLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "loanIdToLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "loanRepaidOrLiquidated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maximumLoanDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "payBackLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "permittedNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renegotiateLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setERC20Permit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setERC20Permits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateAdminFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMaximumLoanDuration",
    data: BytesLike
  ): Result;
}

export namespace AdminFeeUpdatedEvent {
  export type InputTuple = [newAdminFee: BigNumberish];
  export type OutputTuple = [newAdminFee: bigint];
  export interface OutputObject {
    newAdminFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ERC20PermitEvent {
  export type InputTuple = [erc20Contract: AddressLike, isPermitted: boolean];
  export type OutputTuple = [erc20Contract: string, isPermitted: boolean];
  export interface OutputObject {
    erc20Contract: string;
    isPermitted: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LoanLiquidatedEvent {
  export type InputTuple = [
    loanId: BytesLike,
    borrower: AddressLike,
    lender: AddressLike,
    principalAmount: BigNumberish,
    nftCollateralId: BigNumberish,
    loanMaturityDate: BigNumberish,
    loanLiquidationDate: BigNumberish,
    nftCollateralContract: AddressLike
  ];
  export type OutputTuple = [
    loanId: string,
    borrower: string,
    lender: string,
    principalAmount: bigint,
    nftCollateralId: bigint,
    loanMaturityDate: bigint,
    loanLiquidationDate: bigint,
    nftCollateralContract: string
  ];
  export interface OutputObject {
    loanId: string;
    borrower: string;
    lender: string;
    principalAmount: bigint;
    nftCollateralId: bigint;
    loanMaturityDate: bigint;
    loanLiquidationDate: bigint;
    nftCollateralContract: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LoanRenegotiatedEvent {
  export type InputTuple = [
    loanId: BytesLike,
    borrower: AddressLike,
    lender: AddressLike,
    newLoanDuration: BigNumberish,
    newMaximumRepaymentAmount: BigNumberish,
    renegotiationFee: BigNumberish,
    renegotiationAdminFee: BigNumberish
  ];
  export type OutputTuple = [
    loanId: string,
    borrower: string,
    lender: string,
    newLoanDuration: bigint,
    newMaximumRepaymentAmount: bigint,
    renegotiationFee: bigint,
    renegotiationAdminFee: bigint
  ];
  export interface OutputObject {
    loanId: string;
    borrower: string;
    lender: string;
    newLoanDuration: bigint;
    newMaximumRepaymentAmount: bigint;
    renegotiationFee: bigint;
    renegotiationAdminFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LoanRepaidEvent {
  export type InputTuple = [
    loanId: BytesLike,
    borrower: AddressLike,
    lender: AddressLike,
    principalAmount: BigNumberish,
    nftCollateralId: BigNumberish,
    amountPaidToLender: BigNumberish,
    adminFee: BigNumberish,
    interest: BigNumberish,
    nftCollateralContract: AddressLike,
    erc20Denomination: AddressLike
  ];
  export type OutputTuple = [
    loanId: string,
    borrower: string,
    lender: string,
    principalAmount: bigint,
    nftCollateralId: bigint,
    amountPaidToLender: bigint,
    adminFee: bigint,
    interest: bigint,
    nftCollateralContract: string,
    erc20Denomination: string
  ];
  export interface OutputObject {
    loanId: string;
    borrower: string;
    lender: string;
    principalAmount: bigint;
    nftCollateralId: bigint;
    amountPaidToLender: bigint;
    adminFee: bigint;
    interest: bigint;
    nftCollateralContract: string;
    erc20Denomination: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LoanStartedEvent {
  export type InputTuple = [
    loanId: BytesLike,
    borrower: AddressLike,
    lender: AddressLike,
    loanTerms: LoanData.LoanTermsStruct
  ];
  export type OutputTuple = [
    loanId: string,
    borrower: string,
    lender: string,
    loanTerms: LoanData.LoanTermsStructOutput
  ];
  export interface OutputObject {
    loanId: string;
    borrower: string;
    lender: string;
    loanTerms: LoanData.LoanTermsStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MaximumLoanDurationUpdatedEvent {
  export type InputTuple = [newMaximumLoanDuration: BigNumberish];
  export type OutputTuple = [newMaximumLoanDuration: bigint];
  export interface OutputObject {
    newMaximumLoanDuration: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DirectLoanFixedOffer extends BaseContract {
  connect(runner?: ContractRunner | null): DirectLoanFixedOffer;
  waitForDeployment(): Promise<this>;

  interface: DirectLoanFixedOfferInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  HUNDRED_PERCENT: TypedContractMethod<[], [bigint], "view">;

  acceptOffer: TypedContractMethod<
    [
      _loanId: BytesLike,
      _offer: LoanData.OfferStruct,
      _signature: LoanData.SignatureStruct
    ],
    [void],
    "nonpayable"
  >;

  adminFeeInBasisPoints: TypedContractMethod<[], [bigint], "view">;

  cancelLoanCommitmentBeforeLoanHasBegun: TypedContractMethod<
    [_nonce: BigNumberish],
    [void],
    "nonpayable"
  >;

  drainERC20Airdrop: TypedContractMethod<
    [_tokenAddress: AddressLike, _receiver: AddressLike],
    [void],
    "nonpayable"
  >;

  drainERC721Airdrop: TypedContractMethod<
    [
      _tokenAddress: AddressLike,
      _tokenId: BigNumberish,
      _receiver: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  getERC20Permit: TypedContractMethod<[_erc20: AddressLike], [boolean], "view">;

  getPayoffAmount: TypedContractMethod<[_loanId: BytesLike], [bigint], "view">;

  getWhetherNonceHasBeenUsedForUser: TypedContractMethod<
    [_user: AddressLike, _nonce: BigNumberish],
    [boolean],
    "view"
  >;

  isValidLoanId: TypedContractMethod<[_loanId: BytesLike], [boolean], "view">;

  liquidateOverdueLoan: TypedContractMethod<
    [_loanId: BytesLike],
    [void],
    "nonpayable"
  >;

  loanIdToLoan: TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        bigint,
        bigint,
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        string,
        string,
        string,
        boolean,
        bigint
      ] & {
        principalAmount: bigint;
        maximumRepaymentAmount: bigint;
        nftCollateralId: bigint;
        erc20Denomination: string;
        duration: bigint;
        adminFeeInBasisPoints: bigint;
        loanStartTime: bigint;
        nftCollateralContract: string;
        borrower: string;
        lender: string;
        useLendingPool: boolean;
        status: bigint;
      }
    ],
    "view"
  >;

  loanRepaidOrLiquidated: TypedContractMethod<
    [arg0: BytesLike],
    [boolean],
    "view"
  >;

  maximumLoanDuration: TypedContractMethod<[], [bigint], "view">;

  onERC721Received: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  payBackLoan: TypedContractMethod<[_loanId: BytesLike], [void], "nonpayable">;

  permittedNFTs: TypedContractMethod<[], [string], "view">;

  renegotiateLoan: TypedContractMethod<
    [
      _loanId: BytesLike,
      _newLoanDuration: BigNumberish,
      _newMaximumRepaymentAmount: BigNumberish,
      _renegotiationFee: BigNumberish,
      _lenderNonce: BigNumberish,
      _expiry: BigNumberish,
      _lenderSignature: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setERC20Permit: TypedContractMethod<
    [_erc20: AddressLike, _permit: boolean],
    [void],
    "nonpayable"
  >;

  setERC20Permits: TypedContractMethod<
    [_erc20s: AddressLike[], _permits: boolean[]],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [_newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateAdminFee: TypedContractMethod<
    [_newAdminFeeInBasisPoints: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateMaximumLoanDuration: TypedContractMethod<
    [_newMaximumLoanDuration: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "HUNDRED_PERCENT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "acceptOffer"
  ): TypedContractMethod<
    [
      _loanId: BytesLike,
      _offer: LoanData.OfferStruct,
      _signature: LoanData.SignatureStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "adminFeeInBasisPoints"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "cancelLoanCommitmentBeforeLoanHasBegun"
  ): TypedContractMethod<[_nonce: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "drainERC20Airdrop"
  ): TypedContractMethod<
    [_tokenAddress: AddressLike, _receiver: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "drainERC721Airdrop"
  ): TypedContractMethod<
    [
      _tokenAddress: AddressLike,
      _tokenId: BigNumberish,
      _receiver: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getERC20Permit"
  ): TypedContractMethod<[_erc20: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "getPayoffAmount"
  ): TypedContractMethod<[_loanId: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getWhetherNonceHasBeenUsedForUser"
  ): TypedContractMethod<
    [_user: AddressLike, _nonce: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isValidLoanId"
  ): TypedContractMethod<[_loanId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "liquidateOverdueLoan"
  ): TypedContractMethod<[_loanId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "loanIdToLoan"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        bigint,
        bigint,
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        string,
        string,
        string,
        boolean,
        bigint
      ] & {
        principalAmount: bigint;
        maximumRepaymentAmount: bigint;
        nftCollateralId: bigint;
        erc20Denomination: string;
        duration: bigint;
        adminFeeInBasisPoints: bigint;
        loanStartTime: bigint;
        nftCollateralContract: string;
        borrower: string;
        lender: string;
        useLendingPool: boolean;
        status: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "loanRepaidOrLiquidated"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "maximumLoanDuration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "onERC721Received"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "payBackLoan"
  ): TypedContractMethod<[_loanId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "permittedNFTs"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renegotiateLoan"
  ): TypedContractMethod<
    [
      _loanId: BytesLike,
      _newLoanDuration: BigNumberish,
      _newMaximumRepaymentAmount: BigNumberish,
      _renegotiationFee: BigNumberish,
      _lenderNonce: BigNumberish,
      _expiry: BigNumberish,
      _lenderSignature: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setERC20Permit"
  ): TypedContractMethod<
    [_erc20: AddressLike, _permit: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setERC20Permits"
  ): TypedContractMethod<
    [_erc20s: AddressLike[], _permits: boolean[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[_newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateAdminFee"
  ): TypedContractMethod<
    [_newAdminFeeInBasisPoints: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateMaximumLoanDuration"
  ): TypedContractMethod<
    [_newMaximumLoanDuration: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AdminFeeUpdated"
  ): TypedContractEvent<
    AdminFeeUpdatedEvent.InputTuple,
    AdminFeeUpdatedEvent.OutputTuple,
    AdminFeeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ERC20Permit"
  ): TypedContractEvent<
    ERC20PermitEvent.InputTuple,
    ERC20PermitEvent.OutputTuple,
    ERC20PermitEvent.OutputObject
  >;
  getEvent(
    key: "LoanLiquidated"
  ): TypedContractEvent<
    LoanLiquidatedEvent.InputTuple,
    LoanLiquidatedEvent.OutputTuple,
    LoanLiquidatedEvent.OutputObject
  >;
  getEvent(
    key: "LoanRenegotiated"
  ): TypedContractEvent<
    LoanRenegotiatedEvent.InputTuple,
    LoanRenegotiatedEvent.OutputTuple,
    LoanRenegotiatedEvent.OutputObject
  >;
  getEvent(
    key: "LoanRepaid"
  ): TypedContractEvent<
    LoanRepaidEvent.InputTuple,
    LoanRepaidEvent.OutputTuple,
    LoanRepaidEvent.OutputObject
  >;
  getEvent(
    key: "LoanStarted"
  ): TypedContractEvent<
    LoanStartedEvent.InputTuple,
    LoanStartedEvent.OutputTuple,
    LoanStartedEvent.OutputObject
  >;
  getEvent(
    key: "MaximumLoanDurationUpdated"
  ): TypedContractEvent<
    MaximumLoanDurationUpdatedEvent.InputTuple,
    MaximumLoanDurationUpdatedEvent.OutputTuple,
    MaximumLoanDurationUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "AdminFeeUpdated(uint16)": TypedContractEvent<
      AdminFeeUpdatedEvent.InputTuple,
      AdminFeeUpdatedEvent.OutputTuple,
      AdminFeeUpdatedEvent.OutputObject
    >;
    AdminFeeUpdated: TypedContractEvent<
      AdminFeeUpdatedEvent.InputTuple,
      AdminFeeUpdatedEvent.OutputTuple,
      AdminFeeUpdatedEvent.OutputObject
    >;

    "ERC20Permit(address,bool)": TypedContractEvent<
      ERC20PermitEvent.InputTuple,
      ERC20PermitEvent.OutputTuple,
      ERC20PermitEvent.OutputObject
    >;
    ERC20Permit: TypedContractEvent<
      ERC20PermitEvent.InputTuple,
      ERC20PermitEvent.OutputTuple,
      ERC20PermitEvent.OutputObject
    >;

    "LoanLiquidated(bytes32,address,address,uint256,uint256,uint256,uint256,address)": TypedContractEvent<
      LoanLiquidatedEvent.InputTuple,
      LoanLiquidatedEvent.OutputTuple,
      LoanLiquidatedEvent.OutputObject
    >;
    LoanLiquidated: TypedContractEvent<
      LoanLiquidatedEvent.InputTuple,
      LoanLiquidatedEvent.OutputTuple,
      LoanLiquidatedEvent.OutputObject
    >;

    "LoanRenegotiated(bytes32,address,address,uint32,uint256,uint256,uint256)": TypedContractEvent<
      LoanRenegotiatedEvent.InputTuple,
      LoanRenegotiatedEvent.OutputTuple,
      LoanRenegotiatedEvent.OutputObject
    >;
    LoanRenegotiated: TypedContractEvent<
      LoanRenegotiatedEvent.InputTuple,
      LoanRenegotiatedEvent.OutputTuple,
      LoanRenegotiatedEvent.OutputObject
    >;

    "LoanRepaid(bytes32,address,address,uint256,uint256,uint256,uint256,uint256,address,address)": TypedContractEvent<
      LoanRepaidEvent.InputTuple,
      LoanRepaidEvent.OutputTuple,
      LoanRepaidEvent.OutputObject
    >;
    LoanRepaid: TypedContractEvent<
      LoanRepaidEvent.InputTuple,
      LoanRepaidEvent.OutputTuple,
      LoanRepaidEvent.OutputObject
    >;

    "LoanStarted(bytes32,address,address,tuple)": TypedContractEvent<
      LoanStartedEvent.InputTuple,
      LoanStartedEvent.OutputTuple,
      LoanStartedEvent.OutputObject
    >;
    LoanStarted: TypedContractEvent<
      LoanStartedEvent.InputTuple,
      LoanStartedEvent.OutputTuple,
      LoanStartedEvent.OutputObject
    >;

    "MaximumLoanDurationUpdated(uint256)": TypedContractEvent<
      MaximumLoanDurationUpdatedEvent.InputTuple,
      MaximumLoanDurationUpdatedEvent.OutputTuple,
      MaximumLoanDurationUpdatedEvent.OutputObject
    >;
    MaximumLoanDurationUpdated: TypedContractEvent<
      MaximumLoanDurationUpdatedEvent.InputTuple,
      MaximumLoanDurationUpdatedEvent.OutputTuple,
      MaximumLoanDurationUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
