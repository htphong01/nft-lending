/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export interface IDirectLoanBaseInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "adminFeeInBasisPoints"
      | "getWhetherNonceHasBeenUsedForUser"
      | "isValidLoanId"
      | "loanIdToLoan"
      | "loanRepaidOrLiquidated"
      | "maximumLoanDuration"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "adminFeeInBasisPoints",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWhetherNonceHasBeenUsedForUser",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidLoanId",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "loanIdToLoan",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "loanRepaidOrLiquidated",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maximumLoanDuration",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "adminFeeInBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWhetherNonceHasBeenUsedForUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidLoanId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "loanIdToLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "loanRepaidOrLiquidated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maximumLoanDuration",
    data: BytesLike
  ): Result;
}

export interface IDirectLoanBase extends BaseContract {
  connect(runner?: ContractRunner | null): IDirectLoanBase;
  waitForDeployment(): Promise<this>;

  interface: IDirectLoanBaseInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  adminFeeInBasisPoints: TypedContractMethod<[], [bigint], "view">;

  getWhetherNonceHasBeenUsedForUser: TypedContractMethod<
    [_user: AddressLike, _nonce: BigNumberish],
    [boolean],
    "view"
  >;

  isValidLoanId: TypedContractMethod<[_loanId: BytesLike], [boolean], "view">;

  loanIdToLoan: TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        bigint,
        bigint,
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        string,
        string,
        string,
        boolean
      ]
    ],
    "view"
  >;

  loanRepaidOrLiquidated: TypedContractMethod<
    [arg0: BytesLike],
    [boolean],
    "view"
  >;

  maximumLoanDuration: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "adminFeeInBasisPoints"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getWhetherNonceHasBeenUsedForUser"
  ): TypedContractMethod<
    [_user: AddressLike, _nonce: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isValidLoanId"
  ): TypedContractMethod<[_loanId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "loanIdToLoan"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        bigint,
        bigint,
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        string,
        string,
        string,
        boolean
      ]
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "loanRepaidOrLiquidated"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "maximumLoanDuration"
  ): TypedContractMethod<[], [bigint], "view">;

  filters: {};
}
